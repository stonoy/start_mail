// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: favourites.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addToFavourites = `-- name: AddToFavourites :one
insert into favourite(id, created_at, updated_at, userid, emailid)
values ($1, $2, $3, $4, $5)
returning id, created_at, updated_at, emailid, userid
`

type AddToFavouritesParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Userid    uuid.UUID
	Emailid   uuid.UUID
}

func (q *Queries) AddToFavourites(ctx context.Context, arg AddToFavouritesParams) (Favourite, error) {
	row := q.db.QueryRowContext(ctx, addToFavourites,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Userid,
		arg.Emailid,
	)
	var i Favourite
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Emailid,
		&i.Userid,
	)
	return i, err
}

const deleteFav = `-- name: DeleteFav :one
delete from favourite where id = $1 and userid = $2
returning id, created_at, updated_at, emailid, userid
`

type DeleteFavParams struct {
	ID     uuid.UUID
	Userid uuid.UUID
}

func (q *Queries) DeleteFav(ctx context.Context, arg DeleteFavParams) (Favourite, error) {
	row := q.db.QueryRowContext(ctx, deleteFav, arg.ID, arg.Userid)
	var i Favourite
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Emailid,
		&i.Userid,
	)
	return i, err
}

const getAllFavOfUser = `-- name: GetAllFavOfUser :many
select f.id, f.userid, f.created_at, e.id, e.created_at, e.updated_at, e.subject, e.body, e.sender, e.reciever from favourite f
inner join email e
on f.emailid = e.id
where f.userid = $1
order by f.created_at desc
limit $2
offset $3
`

type GetAllFavOfUserParams struct {
	Userid uuid.UUID
	Limit  int32
	Offset int32
}

type GetAllFavOfUserRow struct {
	ID          uuid.UUID
	Userid      uuid.UUID
	CreatedAt   time.Time
	ID_2        uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt   time.Time
	Subject     string
	Body        string
	Sender      uuid.UUID
	Reciever    uuid.UUID
}

func (q *Queries) GetAllFavOfUser(ctx context.Context, arg GetAllFavOfUserParams) ([]GetAllFavOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFavOfUser, arg.Userid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFavOfUserRow
	for rows.Next() {
		var i GetAllFavOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.CreatedAt,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.Subject,
			&i.Body,
			&i.Sender,
			&i.Reciever,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numOfAllFavUser = `-- name: NumOfAllFavUser :one
select count(*) from favourite f
inner join email e
on f.emailid = e.id
where f.userid = $1
`

func (q *Queries) NumOfAllFavUser(ctx context.Context, userid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, numOfAllFavUser, userid)
	var count int64
	err := row.Scan(&count)
	return count, err
}
